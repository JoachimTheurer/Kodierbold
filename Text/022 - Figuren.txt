<!DOCTYPE html>
<html lang="de">

<head>

  <title>p5 - Kapitel 01.01</title>
</head>

<body>
<h2>1.3. Erste Zeichnung</h2>
  <p>

		<h3>1.3.1 Quadrat</h3>

Für unsere Zeichnungen können wir viele Figuren verwenden, die in p5 schon vorhanden sind. Wir müssen nur die dafür schon vorhandene Funktion in das p5 Programm einbauen, und schon wird die Figur gezeichnet.
		
		Fangen wir mal mit einem hübsch symmetrischen Quadrat an. Bei einem Quadrat sind alle vier Seiten gleich lang und zwei Seiten stehen immer senkrecht aufeinander. Die Funktion, die wir zum Zeichnen eines Quadrats aufrufen müssen, heisst square() ("sqär, Englisch für Quadrat). Was musst du wohl dieser Funktion mitgeben, damit klar ist, welches Quadrat wo gezeichnet werden muss - fachmännisch gefragt: was sind die Argumente der Funktion square()?

Wir müssen zuerst angeben, wo genau das Quadrat auf der Zeichenfläche hin soll. Die Zeichenfläche gibt es schon, weil im Programm vorher createCanvas() aufgerufen wird. Wie gross diese Zeichenfläche ist, steht im Argument von createCanvas(400, 400) - das sind 400 Pixel nach rechts und 400 Pixel nach unten. Innerhalb dieser 400 mal 400 Pixel soll dein Quadrat hin.
		
		Das erste Argument beim Aufruf der Funktion square() gibt an, wie weit rechts dein Quadrat liegen soll. Ein Wert '0' ist ganz links am Rand, und '400' ist ganz rechts am Rand in unserer 400 mal 400 Zeichenfläche, dann nehmen wir für den Weg nach rechts mal so ungefähr die Mitte mit '200' als erstem Argument für square().

				Das zweite Argument beim Aufruf der Funktion square gibt an, wie weit unten auf der Zeichenfläche dein Quadrat liegen soll. Ein Wert '0' ist ganz oben am Rand, und '400' ist der untere Rand in unserer 400 mal 400 Zeichenfläche, damit bleiben wir mal mit '100' als zweitem Argument für square() in der oberen Hälfte der Zeichenfläche.

Jetzt weiss das p5 Programm schon, wohin genau dies Quadrat gezeichnet werden soll. Was fehlt noch? Wir müssen noch festlegen, wie groß überhaupt das Quadrat werden soll. Weil ein Quadrat schön symmetrisch ist, genügt dafür ein einziger Wert für die Seitenlänge, die ja für alle vier Seiten eines Quadrats gleich ist. Die Seitenlänge des Quadrats ist unser drittes Argument für den Aufruf der square() Funktion. Nehmen wir testweise mal 50 Pixel für die Seitenlänge, dann sieht unser vollständiger Aufruf so aus: 
		square(200, 100, 50)
Genau diese Zeile schreibst (oder kopierst) du jetzt in den draw() Teil hinter den background(220) Aufruf - und schliesst diese Zeile wie immer mit einem Strichpunkt (';') ab. Dann lässt du das Programm mit einem Klick auf den Abspiel-Knopf laufen.

		## screenshot ##

Probier mal aus, die Werte im square() Aufruf zu ändern: mach das Quadrat kleiner [zum Beispiel square(200, 100, 10)] und größer [square(200, 100, 150)] und verschiebe es an eine andere Stelle [zum Beispiel square(100, 200, 50); - das ist 100 Pixel nach rechts und 200 Pixel nach unten.] Du musst nach jeder Änderung im Programm den Abspiel-Knopf drücken, damit auch die Zeichnung entsprechend geändert wird. Probier das unbedingt selber aus und sieh dir an, wie sich das Quadrat verändert!

Du siehst:	p5 zählt den Ort, an dem eine gezeichnete Figur liegen soll - deren Position -, immer von der oberen linken Ecke aus. Zuerst wird in Pixel-Einheiten nach rechts rüber gezählt - das ist die erste Zahl im Argument beim Aufruf der Funktion square(). Dann wird in Pixel-Einheiten nach unten gezählt - das ist die zweite Zahl im Argument beim Aufruf der Funktion square(). Die obere linke Ecke nennen wir den Nullpunkt, weil dort 0 Pixel-Schritte nach rechts und 0 Pixel-Schritte nach unten gezählt werden. 
		
		Die erste und zweite Zahl beim Aufruf der square() Funktion geben also an, wie weit rechts und wie weit runter auf der Zeichenfläche dein Quadrat liegen soll. 
Hast du gemerkt, dass dein Quadrat immer ein bisschen nach rechts und nach unten verschoben ist? Das ist absichtlich so gemacht: square(200, 100) setzt die linke obere Ecke deines Quadrats - und nicht die Mitte - an die Stelle 200 Pixel nach rechts und an die Stelle 100 Pixel nach unten, vom Nullpunkt aus gezählt. 
		
		Probier's mal aus: zeichne ein Quadrat der Größe 100 Pixel an die Stelle (200, 200) in einem Canvas, der 400 mal 400 Pixel groß ist. ## Das Programm dafür sieht so aus ##

		Dann zeichne dieses Quadrat an die Stelle (390, 390), und schon ist es fast verschwunden. p5 zeichnet nur auf die Zeichenfläche; was ausserhalb liegt, wird abgeschnitten. Deshalb bleibt vom Quadrat nur ein kleines Stückchen übrig, wenn die Stelle (390, 390) für die linke obere Ecke des Quadrats fast ausserhalb der Zeichenfläche (400, 400) liegt.  ## Programm ## 
		
		Das Quadrat, das übrig bleibt, ist nur 10 mal 10 Pixel groß. Seine linke obere Ecke ist 400 Pixel (Zechenfläche) minus 390 Pixel (Ecke des Quadrats), gleich 10 Pixel, vom rechten und auch vom unteren Rand der Zeichenfläche entfernt.

<h3>1.3.2 Koordinatensystem</h3>
		
Wie du siehst, ist es wichtig, den Ort genau anzugeben, an dem das Quadrat liegen soll. Dazu verwenden wir als Einheit die Pixel-Schritte, und fangen in der oberen linken Ecke der Zeichenfläche an. Dort ist die Anzahl der Pixel-Schritte nach rechts gleich 0, und die Anzahl der Pixel-Schritte nach unten ist auch gleich 0.
		
Weil die Programmierer schreibfaul sind, sagen sie oft zu 'Schritte nach rechts' kurz nur 'x-Richtung', und zu 'Schritte nach unten' kurz nur 'y-Richtung'. Du rufst also ein Quadrat mit square(x, y, Seitenlänge) auf, mit Zahlenwerten für x nach rechts und y nach unten - zum Beispiel square(150, 200, 100) für die Stelle 150 Pixel nach rechts und 200 Pixel nach unten, von der oberen linken Ecke aus, an der das Qudrat mit der Seitenlänge 100 Pixel gezeichnet werden soll.
		
		Die linke obere Ecke der Zeichenfläche hat den Ort x = 0 und y = 0; und wenn die Zeichenfläche 400 mal 400 Pixel groß ist, hat die Ecke unten rechts die Werte x = 400 und y = 400. Man sagt zu den Werten für x und y auch 'Koordinaten'. Die Schritte nach rechts, x, geben eine Koordinate an, und die Schritte nach unten, y, geben eine zweite Koordinate an - zusammen nennt man das dann ein 'Koordinatensystem'. An der Stelle - oder Position - x = 0 und y = 0, der linken oberen Ecke der Zeichenfläche, liegt der Nullpunkt des Koordinatensystems.

Koordinatensysteme gibt es überall dort, wo man den Ort einer Sache auf einer Fläche angeben muss - zum Beispiel bei Landkarten oder Lageplänen oder in der Mathematik. Da wird es genau so gemacht wie auf unserer Zeichenfläche: es gibt einen Nullpunkt, an dem man losläuft, dann eine Einheit für die Schritte (für uns sind das die Pixel), und schliesslich zwei Richtungen, x und y, um damit eine Position genau anzugeben. 

Bei vielen Koordinatensystemen ist der Nullpunkt in der Ecke unten rechts und die y-Richtung wird nach oben gezählt. Unsere Zeichenfläche ist ein besonderes Koordinatensystem, bei dem der Nullpunkt oben links ist und deshalb die y-Werte nach unten größer werden. Es ist gut, diesen Unterschied im Kopf zu behalten, wenn man andere Koordinatensysteme als unsere Zeichenfläche, zum Beispiel auf Landkarten oder in der Mathematik, sieht.

		<h3>1.3.3. Kreis</h3>

	Natürlich kann p5 nicht nur Quadrate zeichnen, sondern auch Kreise (und vieles andere mehr). Um einen Kreis zu zeichnen, rufen wir die Funktion circle() [Englisch für Kreis, sprich "cörcl"] auf. Welche Argumente brauchen wir für einen Kreis? Wir müssen seine Position auf der Zeichenfläche festlegen - also wie weit seine Mitte in x-Richtung nach rechts und in y-Richtung nach unten von der linken oberen Ecke  liegen soll. Dann brauchen wir noch seine Größe, also wie weit es vom Mittelpunkt des Kreises zum Rand ist - das nennt man den Radius. Der Witz an einem Kreis ist, dass alle Linien vom Mittelpunkt zum Rand - breit, hoch oder quer gezeichnet - gleich lang sind, also brauchen wir nur eine einzige Zahl für den Radius. Für die p5 Funktion circle wird nicht der Radius verwendet, sondern der Durchmesser: vom Rand über den Mittelpunkt wieder bis zum Rand, das ist zweimal der Radius. Ob man den Durchmesser oder den halben Durchmesser, also den Radius verwendet, ist Geschmackssache. Beim Aufruf der Funktion circle() muss nun eben der Durchmesser des gewünschten Kreises angegeben werden. Damit ist die p5-Funktion, um einen Kreis zu zeichnen: square(x, y, Durchmesser).

		Ausprobieren: Zeichne einen Kreis in die Mitte deines Canvas, mit Durchmesser 100, oder 10, oder 300 Pixel. 


==============>
		
		<h3>1.3.3. Reihenfolge</h3>
		

		Kannst Du Kreise ineinander zeichnen, mit gleichem Mittelpunkt aber unterschiedlichem Durchmesser?
		Nehmen wir an, dein Programm sieht so aus:
##		function setup() {
  createCanvas(400, 400);
}

function draw() {
  background(220);
  circle(200, 200, 200);
  circle(200, 200, 100);
}
##

		Dann wird auf der 400 Pixel mal 400 Pixel großen Zeichenfläche, createCanvas(400, 400), zunächst alles mit dem hellgrauen Hintergrund übermalt, background(220). Dann wird die Funktion circle (200, 200, 200) aufgerufen, um an der Stelle (200, 200), der Mitte deiner Leinwand, einen Kreis mit einem Durchmesser von 200 Pixeln zu zeichnen, circle(200, 200, 200). Anschliessend wird ein kleinerer Kreis mit dem gleichen Mittelpunkt, aber einem Durchmesser von nur 100 Pixeln gezeichnet. Das Ergebnis ist ein sketch, eine Zeichnung, von zwei unterschiedlich großen Kreisen mit gleichem Mittelpunkt (was übrigens "konzentrische" Kreise genannt wird).
		
		Und jetzt stell mal die Reihenfolge der Funktionsaufrufe um, und setze zum Beispiel die background() Anweisung an den Schluss in draw(): alle Kreise sind verschwunden, und nur die graue Zeichenfläche ist noch da. Warum zeichnet p5 jetzt die Kreise nicht mehr? Die Lösung ist: es kommt ganz entscheidend auf die Reihenfolge der Anweisungen an. p5 zeichnet die Kreise sehr wohl, zuerst den großen, dann den kleinen, aber dann kommt die background() Anweisung und übermalt alles wieder, bevor am Schluss von draw die Zeichnung ausgegeben wird. Ein Programm läuft Anweisung für Anweisung, brav nacheinander, ab; und was früher gezeichnet aber später im Programm überschrieben wird, ist dann verschwunden.

		Kannst Du erklären, warum hier der Kreis, circle(200, 200, 100), fehlt? Wie macht man's richtig, um sowohl Kreis als auch Quadrat zu zeichnen?
		
		function setup() {
  createCanvas(400, 400);
}

function draw() {
  background(220);
  circle(200, 200, 100);
  square(100, 100, 200);
}


		Diese ganz strenge Reihenfolge, in der dein Programm abgearbeitet wird, ist sehr nützlich, um neue Figuren zu zeichnen, zum Beispiel um einem Quadrat einen Helm und einen Fuß-Topf, aber auch zwei riesige Augen zu verpassen:

		function setup() {
  createCanvas(400, 400);
}

function draw() {
  background(220);
  circle(200, 100, 200);
  circle(200, 300, 200);
  square(100, 100, 200);
  circle(100, 200, 200);
  circle(300, 200, 200);
}


Tippe dieses Programm ab, oder kopiere es, und ändere dann die Reihenfolge, in der die Anweisungen aufgerufen werden. Dazu löscht du in draw{} eine Zeile und fügst sie an einer anderen Stelle wieder ein.
		(In Windows geht das mit CTRL-X und CTRL-V.) So wird mal mehr, mal weniger vom Quadrat in der Mitte sichtbar.

function setup() {
  createCanvas(400, 400);
}

function draw() {
  background(220);
  circle(200, 100, 200);
  circle(200, 300, 200);
  circle(100, 200, 200);
  circle(300, 200, 200);
  square(100, 100, 200);
}


So verschwindet das arme Quadrat ganz:
		
		function setup() {
  createCanvas(400, 400);
}

function draw() {
	background(220);
  square(100, 100, 200);
  circle(200, 100, 200);
  circle(200, 300, 200);
  circle(100, 200, 200);
  circle(300, 200, 200);

}

		<h3>1.3.3. Rechnen mit Koordinaten</h3>
		
		Es lohnt sich auch, genau anzusehen und zu verstehen, wie hier die Position der Kreise und des Quadrats zustande kommen. Dann wirst du die Koordinaten in x- und y-Richtung, und was sie bedeuten, besser verstehen können.

		function setup() {
  createCanvas(400, 400);
}

function draw() {
  background(220);
  circle(200, 100, 200);
  circle(200, 300, 200);
  square(100, 100, 200);
  circle(100, 200, 200);
  circle(300, 200, 200);
}

		Die linke obere Ecke des Quadrats square(100, 100, 200); sitzt an der Position nach rechts x = 100 und nach unten y = 100, von der linken oberen Ecke der Leinwand aus in Pixel-Einheiten gezählt. Weil das Quadrat, square(100, 100, 200), eine Kantenlänge von 200 Pixeln hat, ist die rechte obere Ecke an der Stelle 300 nach rechts und immer noch nur 100 nach unten - kurz gesagt: an der Position (300, 100). Für die rechte untere Ecke bleibt die x-Position gleich (300), aber es kommt eine Seitenlänge von 200 in der Richtung nach unten dazu (100 + 200 = 300). Die Position unten rechts ist also (300, 300). Für die Ecke unten links sind es nach rechts nur 100 Pixel, wie für die Ecke oben links auch. Dann zählen wir aber die Seitenlänge von 200 Pixeln nach unten dazu, also sind es bis zur Ecke unten links 100 + 200 = 300 Pixel, was insgesamt eine Position der linken unteren Ecke von (100, 300) ergibt.

Die Positionsangabe eines Kreises bezeichnet seinen Mittelpunkt: circle(200, 100, 200) zeichnet den Mittelpunkt des Kreises an die Stelle 200 Pixel nach rechts und 100 Pixel nach unten, vom oberen linken Rand der Zeichenfläche aus gezählt. Der Kreis hat einen Durchmesser von 200 Pixeln, also einen Radius von 100 Pixeln. Der Mittelpunkt ist 100 Pixel nach unten gezeichnet, der Radius geht wieder 100 Pixel nach oben, also berührt der Kreis oben genau den Rand, denn da ist y = 100 - 100 = 0. 

		Warum wird der Kreis vom Quadrat genau zur Hälfte abgedeckt? Erste Voraussetzung: der Durchmesser des Kreises ist genau so gross wie die Seitenlänge des Quadrats, nämlich 200 Pixel. Zweitens: Der Mittelpunkt des Kreises liegt auf der Kante des Quadrats. Auf der linken Seite geht die Kante des Quadrats vom Punkt (100, 100) zum Punkt (100, 300), denn die Seitenlänge ist 200 Pixel. Also muss der Mittelpunkt des Kreises den gleichen Wert für die x-Richtung nach rechts haben, nämlich 100. Und von oben gezählt, in y-Richtung? Die Mitte der Quadrat-Kante ist bei der Position 200 Pixel nach unten: eine halbe Seitenlänge (200 / 2 = 100) von der oberen Kante (bei y = 100) aus, also y = 100 + 100 = 200. Oder: die Kante läuft von (100, 100) nach (100, 300), also ist die Mitte der y-Koordinate zwischen 100 und 300, das heisst 100 + 300, also 400, geteilt durch 2 = 200. Der Kreis hat damit insgesamt die Position (100, 200) und den Durchmesser 200; die Anweisung ist: circle(100, 200, 200).

		Am einfachsten ist es, die Position und Größe einer Figur, die du zeichnen willst, mit einer Mischung aus Probieren und Rechnen herauszufinden. Warum ewig rechnen, wenn man durch Ausprobieren gleich sehen kann, ob eine Figur an ungefähr der Stelle liegt, die man haben möchte? Und wenn es dann auf ein Pixel mehr oder weniger ankommt, kann man ja immer noch rumrechnen - man sollte aber wissen, wie es im Prinzip gemacht wird. 

		<h3>1.3.3. Mehr Figuren</h3>

		Aber endlich zurück zum Zeichnen! Es gibt natürlich noch viele andere Figuren, die der p5-Kobold für uns zeichnen kann, nicht nur Quadrate und Kreise. Wir müssen einfach wie immer nur wissen, welche Anweisung wir ihm geben müssen, also wie der Name der jeweiligen Funktion lautet und welche Argumente in den Klammern des Funktionsaufrufs mitgegeben werden müssen.

						<h4>1.3.4. Rechteck </h4>

		Strecken wir das Quadrat und machen ein Rechteck draus! Bei einem Rechteck stehen immer noch zwei Seiten, die zusammenstoßen, senkrecht aufeinander. Aber nur noch die Seiten, die einander gegenüberliegen, sind gleich lang. Deshalb gibt es ein Argument für die Länge der Seite in x-Richtung (nach rechts oder horizontal), und ein zweites Argument für die Länge der Seite in y-Richtung (nach unten ["runter"] oder vertikal). Vorher kommen noch die beiden Argumente für die x-Position und die y-Position der oberen linken Ecke des Rechtecks - genau so wie vorher beim Quadrat. Rechteck ist auf Englisch "rectangle" (sprich 'räktängl'), die Funktion heisst deshalb rect(). Ein Aufruf mit rect(x, y, rechts, runter) zeichnet ein Rechteck an der Position x Pixel in horizontaler Richtung und y Pixel in vertikaler Richtung von der oberen linken Ecke der Leinwand entfernt, mit einer horizontalen Seitenlänge von 'rechts' Pixeln und und einer vertikalen Seitenlänge von 'runter' Pixeln. Probier's aus und schreibe die Anweisung rect (130, 160, 200, 150) in die draw function des Editors! Dann ändere den Wert dieser vier Argumente - was geschieht dann und warum?

		# code # 

					<h4>1.3.4. Bonus </h4>
		
Probier aus, was passiert, wenn du noch eine Zahl, sprich ein weiteres Argument, ganz hinten in die Klammern des rect() Aufrufs schreibst - zum Ausprobieren vielleicht rect(x, y, rechts, runter, noch-eine-Zahl). Und dann noch ein weiteres, sechstes Argument - und ein siebtes und achtes ...

		Beim Quadrat square() und beim Rechteck rect() kannst du mit zusätzlichen Argumenten die Ecken rund machen. Die Argumente geben an, wie rund die Ecke sein soll - und wieviele Ecken rund gemacht werden sollen. Gibst du nur ein zusätzliches Argument an, werden alle vier Ecken mit genau diesem Wert rund gemacht. Gibst du mehrere zusätzliche Argumente an, steht jeder Wert für die Rundung einer bestimmten Ecke - und der nachfolgenden Ecken, es sei denn, dafür ist ein Argument-Wert vorhanden.
 
						<h4>1.3.6. Dreieck </h4>

		Du kannst dir bestimmt schon denken, welche Argumente für das Dreieck benötigt werden. Es gibt drei Eckpunkte im Dreieck. Jeder Eckpunkt hat eine bestimmte Stelle auf der Leinwand, eine Position, für die der Wert in x-Richtung nach rechts und in y-Richtung nach unten angegeben werden muss. Es sind also zwei Koordinaten, x und y, für einen Eck-Punkt erforderlich. Bei drei Eckpunkten des Dreiecks werden drei mal zwei Werte für die Argumente benötigt:, also 6 Argumente, um die Eckpunkte anzugeben. Wir schreiben den ersten Eckpunkt dann so: (x1, y1), den zweiten (x2, y2) und den dritten (x3, y3), wenn x und y für die Zahlenwerte der Positiion des Eckpunkts stehen. 

		Ein Dreieck heisst auf Englisch "triangle" (sprich 'trei-ängl'), und so heisst auch die Funktion, die das Dreieck zeichnet: triangle (x1, y1, x2, y2, x3, y3).

		Auf geht's - probier das aus und zeichne ein Dreieck - oder gleich drei Dreiecke, deren Spitzen sich berühren!

# code #

								<h4>1.3.7. Linie </h4>

		Eine einfache Linie hat eine Anfangsposition und eine Endposition. Jede Position erfordert, wie immer, die Angabe einer x- und einer y-Koordinate. Also gibt es einen Anfangspunkt der Linie mit den Koordinaten (x1, y1) und einen Endpunkt mit den Koordinaten (x2, y2). Linie heisst auf Englisch "line" (sprich "lain"), wie die Funktion zum Zeichnen einer Linie: line(x1, y1, x2, y2);

		Ausprobieren! Zeichne eine Linie - oder gleich einen kleinen Stern aus drei Linien.

		#code#
		
		Die Breite einer Linie ist 1 Pixel. Hast du eine Idee, wie man auch ohne line-Anweisung solch eine Linie zeichnen kann? Wie schmal kann zum Beispiel ein Rechteck werden - auch nur 1 Pixel breit? Kann man es dann noch von einer Linie unterscheiden? Probier es aus!
#code#

<h4>1.3.8. Punkt </h4>	

Jetzt wird's fast unsichtbar, denn wir zeichnen Punkte. Ein einzelner Punkt ist nur 1 Pixel breit und 1 Pixel hoch, und deshalb auf der Leinwand kaum zu erkennen. 

		Ein Punkt heißt auf Englisch "point" ("peunt"). Wir müssen die x-Koordinate und die y-Koordinate der Position angebe, an der der Punkt liegt. Das ist schon alles, mehr Argumente kann es für einen einzelnen Punkt nicht geben. Die Anweisung für einen Punkt lautet: <code>point(x, y)</code>. Zeichne einen Punkt und schau mal, ob du ihn auf dem Canvas findest. 

		#code#
		
Wenn du den Punkt verschiebst, also die Koordinaten seiner Position änderst, und dann neu zeichnest, kannst Du erkennen, ob es wirklich dein gezeichneter Punkt oder nur ein Fleck auf dem Monitor ist!
		
Einzelne Punkte werden wir nicht so oft benötigen. Häufig gibt ea aber Ansammlungen von mehreren Punkten zu einem Muster oder einer Figur. Weil Punkte so klein sind, kannst du ganz feine Strukturen und Muster mit vielen miteinander verbundenen Punkten nebeneinander zeichnen.
		
				<h4>1.4.2. Ellipse </h4>

Für den Schluss unserer Figurensammlung machen wir den Kreis zur einen Seite hin länger als zur anderen und zeichnen eine Ellipse. Eine Ellipse hat zwar eine Ei- oder Oval-Form, ist aber immer noch symmetrisch nach links und rechts gleich gedehnt, und nach oben und unten gleich gestaucht. Wie üblich  müssen wir der Funktion, die die Ellipse zeichnet, die Position in x- und y-Richtung auf unserer Zeichenfläche angeben, an der der Mittelpunkt der Ellipse liegen soll. Zusätzlich müssen wir verraten, wie lang die Ellipse horizontal in x-Richtung, und wie hoch sie vertikal in y-Richtung sein soll. Diese  Länge wird in beiden Fällen natürlich in Anzahl der Pixel durch den Mittelpunkt gemessen. Der Funktionsaufruf sieht dann so aus: <code>ellipse(x, y, horiontal, vertikal)</code>.

		Gib den Funktionsaufruf in die <code>draw()</code> Funktion ein, und such dir selbst geeignete Werte für die Position und die Länge und Höhe deiner Ellipse aus!

		#code#

Was geschieht, wenn die horizontale Länge und die vertikale Höhe gleich gewählt werden? Probier es aus!

		Wenn Breite und Höhe die gleiche Zahl sind, sind sie nichts anderes als ein einziger Radius, und die in alle Richtungen gleich große Ellipse wird zu einem Kreis. Du kannst die gleiche Figur an derselben Stelle dann auch mit einer <code>circle(x, y, Radius)</code> Anweisung zeichnen.


		** Übung - Landschaft, Figur, Tier, Alien, Haus
		
		======================================00000000

		* Defaultwerte  canvas, ellipse, rect
		* 

			<p> </p>

</body>
</html>